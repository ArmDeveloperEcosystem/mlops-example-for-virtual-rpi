#
# SPDX-FileCopyrightText: Copyright 2022 Arm Limited and/or its affiliates <open-source-office@arm.com>
# SPDX-License-Identifier: MIT
#


name: Build and Publish Docker Image on Docker Hub
on:
  push:
    branches: [main]
    paths-ignore:
      - '**/README.md'
env: 
   DOCKERHUB_USERNAME: dockerhub-username
jobs:
  build_image:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            
      - name: env set
        run: echo "DOCKERHUB_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
      
      - name: Testing filter definitions
        run: docker ps -q --filter "name= server" | grep -q . && echo Found || echo Not Found
        
      - name: Stop and remove server container if exists
        run: if docker ps -q --filter "name= server" | grep -q .; then docker stop $(docker ps -q --filter "name= server") && docker rm $(docker ps -qa --filter "name= server"); fi
      
      
      - name: Testing filter definitions
        run: docker ps -q --filter "name= api" | grep -q . && echo Found || echo Not Found
        
      - name: Stop and remove api container if exists
        run: if docker ps -q --filter "name= api" | grep -q .; then docker stop $(docker ps -q --filter "name= api") && docker rm $(docker ps -qa --filter "name= api"); fi

        
      - name: Build the images
        run: docker-compose build 
      
      - name: Invoke server
        run: docker-compose run -d server  
        
      - name: Run unit test inside docker container
        run: docker-compose run -d api -m unittest --verbose --failfast
        
      - name: Run api
        run: docker-compose run -d api 
        
      - name: Push Image to Docker Hub
        run:
          docker push ${{ secrets.DOCKER_USERNAME }}/ml-app-pi:latest 
          
      - name: remove unused images
        run: if docker images -q --filter "dangling=true" | grep -q .; then docker rmi $(docker images --filter "dangling=true" -q --no-trunc); fi 

      
